<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="上一节添加了websocket组件，实现了前后端通信。后面我们只需要根据游戏的业务逻辑，逐步实现各种功能即可。 另外，在实现具体业务逻辑时，发现上一章设计的消息对象有些不合理，由于粒度过粗，导致可以复" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>从零开始实现放置游戏（十四）——实现战斗挂机（5）地图移动和聊天 - 丶谦信 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/blacklowkey/bundle-blacklowkey.min.css?v=Fx4xdLkGuHnlaG7xntG_wAnZrnorJWp5u_TWKqbvMF0" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/blacklowkey/bundle-blacklowkey-mobile.min.css?v=cYvlxMu_nd6MVfg-vi7YqOC6FaZ7VHFsDM166vO_ekA" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/lyosaki88/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/lyosaki88/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/lyosaki88/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 143673;
        var currentBlogApp = 'lyosaki88';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'BlackLowKey';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/lyosaki88/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/lyosaki88/">安静小角落</a>
</h1>
<h2>
若要百倍的获取，必须千倍的付出
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/lyosaki88/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E4%B8%B6%E8%B0%A6%E4%BF%A1">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/lyosaki88/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
25&nbsp; </span>
<span id="stats_article_count">文章 - 
1&nbsp; </span>
<span id="stats-comment_count">评论 - 
90</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lyosaki88/p/idlewow_14.html">从零开始实现放置游戏（十四）——实现战斗挂机（5）地图移动和聊天</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>　　上一节添加了websocket组件，实现了前后端通信。后面我们只需要根据游戏的业务逻辑，逐步实现各种功能即可。</p>
<p>　　另外，在实现具体业务逻辑时，发现上一章设计的消息对象有些不合理，由于粒度过粗，导致可以复用的部分很少，且这里的通信模型并不是一个请求对应一个响应的模式。比如：玩家a从地图A移动到地图B。此时，a发送移动请求。服务器返回B地图的信息和在线列表给A。同时还要发送最新的在线列表给地图B的其他玩家b,c,d....这里其他玩家并没有发送请求，但收到了响应消息。因此，将消息类型重构成由客户端发出的消息和由服务端发出的消息两类，分别以"3000"和"6000"开头。</p>
<div class="cnblogs_code">
<pre>const MessageCode =<span style="color: #000000;"> {
    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 客户端发送的消息类型</span>
    CLoadCache: "30000001",    <span style="color: #008000;">//</span><span style="color: #008000;"> 缓存加载</span>
    CLogin: "30001001",        <span style="color: #008000;">//</span><span style="color: #008000;"> 登陆</span>
    CLoadMap: "30001002",      <span style="color: #008000;">//</span><span style="color: #008000;"> 读取地图信息</span>
    CLoadOnline: "30001003",   <span style="color: #008000;">//</span><span style="color: #008000;"> 读取在线列表</span>
    CChat: "30002001",         <span style="color: #008000;">//</span><span style="color: #008000;"> 聊天</span>
    CMove: "30002002",         <span style="color: #008000;">//</span><span style="color: #008000;"> 地图移动</span>
    <span style="color: #008000;">//</span><span style="color: #008000;"> 服务端发送的消息类型</span>
    SLoadCache: "60000001",    <span style="color: #008000;">//</span><span style="color: #008000;"> 缓存加载</span>
    SLoadMap: "60001002",      <span style="color: #008000;">//</span><span style="color: #008000;"> 读取地图信息</span>
    SLoadOnline: "60001003",   <span style="color: #008000;">//</span><span style="color: #008000;"> 读取在线列表</span>
    SChat: "60002001",         <span style="color: #008000;">//</span><span style="color: #008000;"> 聊天</span>
};</pre>
</div>
<h2>玩家登陆</h2>
<p>　　进入游戏主界面，socket建立连接时，即发送登陆消息。主要逻辑包括：</p>
<p>　　1.加载玩家角色信息（包括所在地图ID等），将玩家信息，session信息等缓存到服务器。</p>
<p>　　2.加载玩家所在地图信息（地图说明、地图怪物列表，在线玩家列表等）发送至客户端</p>
<p>　　3.通知玩家所在地图的其他玩家更新在线列表</p>
<h2>地图移动</h2>
<p>　　玩家在地图上的移动，这里客户端先通过点击图片上对应的其他地图位置的锚点来实现。当然后面也可以通过给出列表菜单让玩家选择来实现。</p>
<p>　　具体实现代码类似如下，给img标签锚定一组坐标，鼠标点击坐标所在图形范围，即可触发事件。这里锚点的数据，通过定义类MapCoord，配置到后台，动态读出。</p>
<div class="cnblogs_code">
<pre>   <span style="color: #008000;">&lt;!--</span><span style="color: #008000;"> 地图图片和锚点 </span><span style="color: #008000;">--&gt;</span>
   <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">img </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="mapImg"</span><span style="color: #ff0000;"> src</span><span style="color: #0000ff;">="/images/wow/map/${map.name}.jpg"</span><span style="color: #ff0000;"> width</span><span style="color: #0000ff;">="100%"</span><span style="color: #ff0000;"> height</span><span style="color: #0000ff;">="100%;"</span><span style="color: #ff0000;">
                     style</span><span style="color: #0000ff;">="opacity: 0.8;border-radius: 10px;"</span><span style="color: #ff0000;"> usemap</span><span style="color: #0000ff;">="#map-coords"</span><span style="color: #0000ff;">/&gt;</span>
   <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">map </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="map-coords"</span><span style="color: #ff0000;"> name</span><span style="color: #0000ff;">="map-coords"</span><span style="color: #0000ff;">&gt;</span>
       <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">area </span><span style="color: #ff0000;">shape</span><span style="color: #0000ff;">="circle"</span><span style="color: #ff0000;"> coords</span><span style="color: #0000ff;">="35, 160, 20"</span><span style="color: #ff0000;"> onclick</span><span style="color: #0000ff;">="wowClient.move('19');"</span><span style="color: #ff0000;"> href</span><span style="color: #0000ff;">="javascript:void(0);"</span><span style="color: #ff0000;"> alt</span><span style="color: #0000ff;">="西部荒野"</span><span style="color: #ff0000;"> title</span><span style="color: #0000ff;">="西部荒野"</span><span style="color: #0000ff;">/&gt;</span>
   <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">map</span><span style="color: #0000ff;">&gt;<br /></span></pre>
</div>
<p>　　关于移动的业务逻辑，以玩家a从地图A移动到地图B为例，主要包括以下几点：</p>
<p>　　　　服务端：</p>
<p>　　　　　　1.更信息服务器中的缓存数据（玩家A的角色信息数据，所在地图ID更新 为 地图B的ID， 地图A、B的在线玩家列表更新）</p>
<p>　　　　客户端：</p>
<p>　　　　　　1.更新玩家a的地图信息到地图B&nbsp;</p>
<p>　　　　　　2.1)更新玩家a的当前地图B的在线玩家列表&nbsp;</p>
<p>　　　　　　2.2)更新玩家a的当前地图B的怪物列表</p>
<p>　　　　　　3.更新地图A的所有玩家的在线列表（从中移除玩家A）</p>
<p>　　　　　　4.更新地图B的所有玩家的在线列表（从中添加玩家A）（这一步，地图B的所有玩家其实已经包含了玩家A，所以2.1可以省略）</p>
<p>　　后台消息处理逻辑主要如下：</p>
<div class="cnblogs_code">
<pre>    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> handleMoveMessage(Session session, CMoveMessage message) {
        Character character </span>=<span style="color: #000000;"> GameWorld.OnlineCharacter.get(session.getId());
        String fromMapId </span>=<span style="color: #000000;"> character.getMapId();
        String destMapId </span>=<span style="color: #000000;"> message.getDestMapId();
        character.setMapId(destMapId);
        GameWorld.MapCharacter.get(fromMapId).remove(character);
        GameWorld.MapCharacter.get(destMapId).add(character);
        GameWorld.OnlineCharacter.get(session.getId()).setMapId(destMapId);
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 通知玩家更新地图信息</span>
        <span style="color: #0000ff;">this</span><span style="color: #000000;">.sendLoadMap(session, destMapId);
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 通知原地图玩家更新在线列表</span>
        <span style="color: #0000ff;">this</span><span style="color: #000000;">.sendLoadOnlineToMap(fromMapId);
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 通知目标地图玩家更新在线列表</span>
        <span style="color: #0000ff;">this</span><span style="color: #000000;">.sendLoadOnlineToMap(destMapId);
    }

    </span><span style="color: #008000;">/**</span><span style="color: #008000;">
     * 发送加载地图消息
     *
     * </span><span style="color: #808080;">@param</span><span style="color: #008000;"> session session
     * </span><span style="color: #808080;">@param</span><span style="color: #008000;"> mapId   地图id
     </span><span style="color: #008000;">*/</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> sendLoadMap(Session session, String mapId) {
        WowMessageHeader header </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> WowMessageHeader(WowMessageCode.SLoadMap);
        MapInfoVO mapInfoVO </span>= <span style="color: #0000ff;">this</span><span style="color: #000000;">.loadMapInfo(mapId);
        SLoadMapMessage content </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> SLoadMapMessage();
        content.setMapInfo(mapInfoVO);
        WowMessage</span>&lt;SLoadMapMessage&gt; wowMessage = <span style="color: #0000ff;">new</span> WowMessage&lt;&gt;<span style="color: #000000;">(header, content);
        </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.sendOne(session, wowMessage);
    }

    </span><span style="color: #008000;">/**</span><span style="color: #008000;">
     * 发送加载在线列表消息给指定地图的玩家
     *
     * </span><span style="color: #808080;">@param</span><span style="color: #008000;"> mapId 地图id
     </span><span style="color: #008000;">*/</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> sendLoadOnlineToMap(String mapId) {
        WowMessageHeader header </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> WowMessageHeader(WowMessageCode.SLoadOnline);
        OnlineInfoVO onlineInfoVO </span>= <span style="color: #0000ff;">this</span><span style="color: #000000;">.loadOnlineInfo(mapId);
        SLoadOnlineMessage content </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> SLoadOnlineMessage();
        content.setOnlineInfo(onlineInfoVO);
        WowMessage</span>&lt;SLoadOnlineMessage&gt; wowMessageLoadOnline = <span style="color: #0000ff;">new</span> WowMessage&lt;&gt;<span style="color: #000000;">(header, content);
        List</span>&lt;Character&gt; mapChars =<span style="color: #000000;"> GameWorld.MapCharacter.get(mapId);
        </span><span style="color: #0000ff;">for</span><span style="color: #000000;"> (Character mapChar : mapChars) {
            </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.sendOne(GameWorld.OnlineSession.get(mapChar.getId()), wowMessageLoadOnline);
        }
    }</span></pre>
</div>
<h2>聊天</h2>
<p>　　目前主要实现3种聊天频道：【本地】、【世界】、【私聊】。</p>
<p>　　这里有一点注意的是，玩家A发送消息后，聊天记录应该立即显示在A的客户端上，还是在消息发送成功后才显示。我选择的是后者，考虑到如果消息发送时，B已经下线了，消息发送失败却仍显示了聊天记录，则显得不合理。</p>
<p>　　在处理本地、世界频道聊天逻辑时，A作为本地和世界在线列表的一员，正常接收消息处理即可。</p>
<p>　　在处理私聊频道聊天时，因为消息是发送给B的，B的客户端能正常显示。但A并未接收任何聊天消息，所以不会显示自己发出去的私聊信息，这里就需要给A也返回一条消息，通知客户端显示聊天记录，或者通知其B已下线聊天发送失败。</p>
<p>　　考虑到遇到A给B发送聊天消息时，B刚好下线，消息发送失败，这种情况应该有一种错误提示的消息类型和处理逻辑，目前暂未实现，列到todo列表。</p>
<p>　　聊天消息的处理逻辑目前如下：</p>
<div class="cnblogs_code">
<pre>    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> handleChatMessage(Session session, CChatMessage message) {
        Character character </span>=<span style="color: #000000;"> GameWorld.OnlineCharacter.get(session.getId());
        WowMessageHeader header </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> WowMessageHeader(WowMessageCode.SChat);
        SChatMessage response </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> SChatMessage();
        response.setSendId(character.getId());
        response.setSendName(character.getName());
        response.setRecvId(message.getRecvId());
        response.setRecvName(message.getRecvName());
        response.setMessage(message.getMessage());
        response.setChannel(message.getChannel());
        WowMessage wowMessage </span>= <span style="color: #0000ff;">new</span> WowMessage&lt;&gt;<span style="color: #000000;">(header, response);
        String chatChannel </span>=<span style="color: #000000;"> message.getChannel();
        </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (chatChannel.equals(GameConst.ChatChannel.Local)) {
            List</span>&lt;Character&gt; mapChars =<span style="color: #000000;"> GameWorld.MapCharacter.get(character.getMapId());
            </span><span style="color: #0000ff;">for</span><span style="color: #000000;"> (Character mapChar : mapChars) {
                Session recvSession </span>=<span style="color: #000000;"> GameWorld.OnlineSession.get(mapChar.getId());
                </span><span style="color: #0000ff;">if</span> (recvSession != <span style="color: #0000ff;">null</span> &amp;&amp;<span style="color: #000000;"> recvSession.isOpen()) {
                    </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.sendOne(recvSession, wowMessage);
                }
            }
        } </span><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (chatChannel.equals(GameConst.ChatChannel.World)) {
            </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.sendAll(wowMessage);
        } </span><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (chatChannel.equals(GameConst.ChatChannel.Whisper)) {
            Session recvSession </span>=<span style="color: #000000;"> GameWorld.OnlineSession.get(message.getRecvId());
            </span><span style="color: #0000ff;">if</span> (recvSession != <span style="color: #0000ff;">null</span> &amp;&amp;<span style="color: #000000;"> recvSession.isOpen()) {
                </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.sendOne(session, wowMessage);
                </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.sendOne(recvSession, wowMessage);
            } </span><span style="color: #0000ff;">else</span><span style="color: #000000;"> {
                </span><span style="color: #008000;">//</span><span style="color: #008000;"> todo 发送错误消息</span>
<span style="color: #000000;">            }
        } </span><span style="color: #0000ff;">else</span><span style="color: #000000;"> {
            </span><span style="color: #008000;">//</span><span style="color: #008000;"> todo 其他频道聊天待实现</span>
<span style="color: #000000;">        }
    }

    </span><span style="color: #008000;">/**</span><span style="color: #008000;">
     * 给指定客户端发送消息
     *
     * </span><span style="color: #808080;">@param</span><span style="color: #008000;"> session    客户端session
     * </span><span style="color: #808080;">@param</span><span style="color: #008000;"> wowMessage 消息对象
     </span><span style="color: #008000;">*/</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> sendOne(Session session, WowMessage wowMessage) {
        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            String message </span>=<span style="color: #000000;"> JSON.toJSONString(wowMessage);
            session.getBasicRemote().sendText(message);
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
    }

    </span><span style="color: #008000;">/**</span><span style="color: #008000;">
     * 给所有客户端发送消息
     *
     * </span><span style="color: #808080;">@param</span><span style="color: #008000;"> wowMessage 消息对象
     </span><span style="color: #008000;">*/</span>
    <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> sendAll(WowMessage wowMessage) {
        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {
            String message </span>=<span style="color: #000000;"> JSON.toJSONString(wowMessage);
            Collection</span>&lt;Session&gt; sessions =<span style="color: #000000;"> GameWorld.OnlineSession.values();
            </span><span style="color: #0000ff;">for</span><span style="color: #000000;"> (Session session : sessions) {
                session.getBasicRemote().sendText(message);
            }
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
    }</span></pre>
</div>
<h2>其他</h2>
<p>　　除了业务处理逻辑，本章的代码还添加了一个模型映射组件DozerMapper，主要用作模型转换。</p>
<p>　　因为之前定义的模型都是数据库映射模型，包含isDelete, createTime, createUser等一些主要用于系统运维的字段，不需要在通信时暴露给客户端，既增加了通信的数据量，也可能暴露出潜在的风险。因此，对需要通信的模型，统一创建VO，视图模型。转换后，再发送给客户端。</p>
<p>　　关于DozerMapper的使用，可以自行看下官方的文档（推荐），比较全面，只是是英文的，或者其他介绍此组件的博客。</p>
<h2>效果演示</h2>
<p>　　这里我启用Chrom和360浏览器，登录2个不同的账号，来测试地图移动和聊天功能，如下图。</p>
<p><img src="https://img2020.cnblogs.com/blog/502227/202004/502227-20200426165407953-1856670592.gif" alt="" width="1124" height="600"></p>
<p>&nbsp;</p>
<h2>本章小结</h2>
<p>　　本章主要实现了基本功能 地图移动 和 聊天，架构上添加的dozerMapper组件。</p>
<p>　　前端也做了部分重构，但并非重点，在源码中能看懂，会修改即可。对于未详细描述的细节可以参看源代码。</p>
<p>　　本章源码下载地址：<a href="https://545c.com/file/14960372-439875280" target="_blank">https://545c.com/file/14960372-439875280</a></p>
<p>　　本文原文地址：<a href="https://www.cnblogs.com/lyosaki88/p/idlewow_14.html" target="_blank">https://www.cnblogs.com/lyosaki88/p/idlewow_14.html</a></p>
<p>　　项目交流群：329989095 （欢迎因任何原因加群交流）</p>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-26 17:07</span>&nbsp;
<a href="https://www.cnblogs.com/lyosaki88/">丶谦信</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12780873" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12780873);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 143673, cb_blogApp = 'lyosaki88', cb_blogUserGuid = 'b60b8379-0987-e211-9984-842b2b196315';
    var cb_entryId = 12780873, cb_entryCreatedDate = '2020-04-26 17:07', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 丶谦信
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>